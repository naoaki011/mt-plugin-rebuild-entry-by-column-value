name: RebuildEntryByColumnValue
id:   RebuildEntryByColumnValue
key:  rebuildentrybycolumnvalue
version: 0.2
author_link: http://alfasado.net/
author_name: Alfasado Inc.
description: Rebuild entry by entry's column value.
tags:
    function:
        RebuildEntryByColumnValue: >
                sub {
                        my ( $ctx, $args, $cond ) = @_;
                        my $app = MT->instance;
                        my $blog_id = $args->{ blog_id };
                        if ( ref( $app ) =~ /^MT::App/ ) {
                            return if ( $app->mode =~ /preview/ );
                            if (! $blog_id ) {
                                $blog_id = $app->blog->id
                                  or return '';
                            }
                        } else {
                            my $current_blog = $ctx->stash( 'blog' );
                            if (! $blog_id ) {
                                $blog_id = $current_blog->id
                                  or return'';
                            }
                        }
                        if ( $blog_id eq 'all' ) {
                            $blog_id = undef;
                        }
                        my $column = $args->{ column } || 'title';
                        my $class = $args->{ class } || 'entry';
                        my $eq = $args->{ eq };
                        return '' unless $eq;
                        require MT::Entry;
                        my $params;
                        $params->{ blog_id } = $blog_id if $blog_id;
                        $params->{ class } = $class;
                        $params->{ $column } = $eq;
                        $params->{ status } = MT::Entry::RELEASE();

                        my $args = {};
                        if ( $column =~ /^field\./ ) {
                            my $target_class = MT->model( $class );
                            my $meta_class = $target_class->meta_pkg;
                            my $meta_pk = $meta_class->primary_key_tuple->[ 0 ];
                            my $meta_id_cond = '= ' . $meta_pk;
                            my $meta_rec = MT::Meta->metadata_by_name( $target_class, $column );
                            my $meta_col = $meta_rec->{ type };
                            $args->{ 'join' } = 
                                $meta_class->join_on(
                                                undef,
                                                {
                                                    $meta_pk => \$meta_id_cond,
                                                    type => $column,
                                                    $meta_col => $eq,
                                                },
                                            ),
                            delete $params->{ $column };
                        }
                        my @entries = MT::Entry->load( $params, $args );

                        require MT::WeblogPublisher;
                        for my $entry ( @entries ) {
                            my $pub = MT::WeblogPublisher->new;
                            $pub->rebuild_entry( Blog => $entry->blog, Entry => $entry->id, Force => 1, );
                            MT->instance->request( '__cached_maps', {} );
                            MT->instance->request( '__published:' . $entry->blog_id, {} );
                        }
                        return '';
                    }

